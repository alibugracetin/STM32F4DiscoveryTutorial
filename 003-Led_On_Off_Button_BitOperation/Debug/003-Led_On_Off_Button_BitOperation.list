
003-Led_On_Off_Button_BitOperation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  4 .ARM          00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000350  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000350  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000154  00000000  00000000  00010380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000097  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000105b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f08  00000000  00000000  000105e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000414  00000000  00000000  000114f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b7c  00000000  00000000  00011904  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015480  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000154fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000330 	.word	0x08000330

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000330 	.word	0x08000330

080001e8 <main>:
#include<stdint.h>

#define DelayTime  100000

int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b089      	sub	sp, #36	; 0x24
 80001ec:	af00      	add	r7, sp, #0

	//constant pointer pointing to uint32_t variable. Const pointer shouldn't point another adress
	uint32_t  volatile *const RCC_AHB1_Enable 	 = (uint32_t *)(0x40023830);
 80001ee:	4b23      	ldr	r3, [pc, #140]	; (800027c <main+0x94>)
 80001f0:	61fb      	str	r3, [r7, #28]
	uint32_t  volatile *const GPIOD_Mode_Reg   	 = (uint32_t *)(0x40020C00);
 80001f2:	4b23      	ldr	r3, [pc, #140]	; (8000280 <main+0x98>)
 80001f4:	61bb      	str	r3, [r7, #24]
	uint32_t  volatile *const GPIOD_Output_Reg   = (uint32_t *)(0x40020C14);
 80001f6:	4b23      	ldr	r3, [pc, #140]	; (8000284 <main+0x9c>)
 80001f8:	617b      	str	r3, [r7, #20]

	uint32_t volatile *const GPIOA_Mode_Reg		 = (uint32_t *)(0x40020000);
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <main+0xa0>)
 80001fc:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const GPIOA_Pull_Up_Down  = (uint32_t *)(0x4002000C);
 80001fe:	4b23      	ldr	r3, [pc, #140]	; (800028c <main+0xa4>)
 8000200:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const GPIOA_Input		 = (uint32_t *)(0x40020010);
 8000202:	4b23      	ldr	r3, [pc, #140]	; (8000290 <main+0xa8>)
 8000204:	60bb      	str	r3, [r7, #8]

	*RCC_AHB1_Enable |= (1 << 0) ; //RCC Enable for GPIOA
 8000206:	69fb      	ldr	r3, [r7, #28]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 0201 	orr.w	r2, r3, #1
 800020e:	69fb      	ldr	r3, [r7, #28]
 8000210:	601a      	str	r2, [r3, #0]
	*RCC_AHB1_Enable |= (1 << 3) ; //RCC Enable for GPIOD
 8000212:	69fb      	ldr	r3, [r7, #28]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0208 	orr.w	r2, r3, #8
 800021a:	69fb      	ldr	r3, [r7, #28]
 800021c:	601a      	str	r2, [r3, #0]
	//shift left three times and  masking

	*GPIOD_Mode_Reg &= (~(3 << 24));
 800021e:	69bb      	ldr	r3, [r7, #24]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000226:	69bb      	ldr	r3, [r7, #24]
 8000228:	601a      	str	r2, [r3, #0]
	*GPIOD_Mode_Reg |= (1 << 24);
 800022a:	69bb      	ldr	r3, [r7, #24]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	69bb      	ldr	r3, [r7, #24]
 8000234:	601a      	str	r2, [r3, #0]

	//GPIOA A0 input mode
	*GPIOA_Mode_Reg &= (~(3 << 0));
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f023 0203 	bic.w	r2, r3, #3
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	601a      	str	r2, [r3, #0]

	//GPIOA A0 Pull Up
	*GPIOA_Pull_Up_Down &= (~(3 << 0));
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f023 0203 	bic.w	r2, r3, #3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	601a      	str	r2, [r3, #0]
	*GPIOA_Pull_Up_Down |= (0 << 1);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]


	while (1)
	{
		uint8_t input = (uint8_t)(*GPIOA_Input & 0x1);
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]

		if(input == 0)
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d104      	bne.n	8000272 <main+0x8a>
		{
			*GPIOD_Output_Reg = (1 << 12);
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e7f1      	b.n	8000256 <main+0x6e>
		}
		else
			*GPIOD_Output_Reg = (0 << 12);
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
	{
 8000278:	e7ed      	b.n	8000256 <main+0x6e>
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00
 8000284:	40020c14 	.word	0x40020c14
 8000288:	40020000 	.word	0x40020000
 800028c:	4002000c 	.word	0x4002000c
 8000290:	40020010 	.word	0x40020010

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490e      	ldr	r1, [pc, #56]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0b      	ldr	r4, [pc, #44]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002be:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 f811 	bl	80002e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ff8f 	bl	80001e8 <main>

080002ca <LoopForever>:

LoopForever:
    b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	08000350 	.word	0x08000350
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC_IRQHandler>
	...

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	4e0d      	ldr	r6, [pc, #52]	; (8000320 <__libc_init_array+0x38>)
 80002ec:	4c0d      	ldr	r4, [pc, #52]	; (8000324 <__libc_init_array+0x3c>)
 80002ee:	1ba4      	subs	r4, r4, r6
 80002f0:	10a4      	asrs	r4, r4, #2
 80002f2:	2500      	movs	r5, #0
 80002f4:	42a5      	cmp	r5, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	4e0b      	ldr	r6, [pc, #44]	; (8000328 <__libc_init_array+0x40>)
 80002fa:	4c0c      	ldr	r4, [pc, #48]	; (800032c <__libc_init_array+0x44>)
 80002fc:	f000 f818 	bl	8000330 <_init>
 8000300:	1ba4      	subs	r4, r4, r6
 8000302:	10a4      	asrs	r4, r4, #2
 8000304:	2500      	movs	r5, #0
 8000306:	42a5      	cmp	r5, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000310:	4798      	blx	r3
 8000312:	3501      	adds	r5, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800031a:	4798      	blx	r3
 800031c:	3501      	adds	r5, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	08000348 	.word	0x08000348
 800032c:	0800034c 	.word	0x0800034c

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr
